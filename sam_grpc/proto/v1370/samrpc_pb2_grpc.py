# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import samrpc_pb2 as samrpc__pb2


class SAMServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SAMGetImageEmbedding = channel.unary_unary(
                '/sam_service.SAMService/SAMGetImageEmbedding',
                request_serializer=samrpc__pb2.Image.SerializeToString,
                response_deserializer=samrpc__pb2.InputInferArgs.FromString,
                )
        self.SAMGetImageEmbeddingUseCache = channel.unary_unary(
                '/sam_service.SAMService/SAMGetImageEmbeddingUseCache',
                request_serializer=samrpc__pb2.Image.SerializeToString,
                response_deserializer=samrpc__pb2.InputInferArgsWithCache.FromString,
                )
        self.SAMPredict = channel.unary_unary(
                '/sam_service.SAMService/SAMPredict',
                request_serializer=samrpc__pb2.SAMPredictRequest.SerializeToString,
                response_deserializer=samrpc__pb2.SAMPredictResponse.FromString,
                )
        self.SAMPredictUseCache = channel.unary_unary(
                '/sam_service.SAMService/SAMPredictUseCache',
                request_serializer=samrpc__pb2.SAMPredictUseCacheRequest.SerializeToString,
                response_deserializer=samrpc__pb2.SAMPredictResponseWithCache.FromString,
                )
        self.CleanCache = channel.unary_unary(
                '/sam_service.SAMService/CleanCache',
                request_serializer=samrpc__pb2.ServerCache.SerializeToString,
                response_deserializer=samrpc__pb2.CleanCacheRespose.FromString,
                )


class SAMServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SAMGetImageEmbedding(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SAMGetImageEmbeddingUseCache(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SAMPredict(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SAMPredictUseCache(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CleanCache(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SAMServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SAMGetImageEmbedding': grpc.unary_unary_rpc_method_handler(
                    servicer.SAMGetImageEmbedding,
                    request_deserializer=samrpc__pb2.Image.FromString,
                    response_serializer=samrpc__pb2.InputInferArgs.SerializeToString,
            ),
            'SAMGetImageEmbeddingUseCache': grpc.unary_unary_rpc_method_handler(
                    servicer.SAMGetImageEmbeddingUseCache,
                    request_deserializer=samrpc__pb2.Image.FromString,
                    response_serializer=samrpc__pb2.InputInferArgsWithCache.SerializeToString,
            ),
            'SAMPredict': grpc.unary_unary_rpc_method_handler(
                    servicer.SAMPredict,
                    request_deserializer=samrpc__pb2.SAMPredictRequest.FromString,
                    response_serializer=samrpc__pb2.SAMPredictResponse.SerializeToString,
            ),
            'SAMPredictUseCache': grpc.unary_unary_rpc_method_handler(
                    servicer.SAMPredictUseCache,
                    request_deserializer=samrpc__pb2.SAMPredictUseCacheRequest.FromString,
                    response_serializer=samrpc__pb2.SAMPredictResponseWithCache.SerializeToString,
            ),
            'CleanCache': grpc.unary_unary_rpc_method_handler(
                    servicer.CleanCache,
                    request_deserializer=samrpc__pb2.ServerCache.FromString,
                    response_serializer=samrpc__pb2.CleanCacheRespose.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'sam_service.SAMService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SAMService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SAMGetImageEmbedding(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sam_service.SAMService/SAMGetImageEmbedding',
            samrpc__pb2.Image.SerializeToString,
            samrpc__pb2.InputInferArgs.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SAMGetImageEmbeddingUseCache(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sam_service.SAMService/SAMGetImageEmbeddingUseCache',
            samrpc__pb2.Image.SerializeToString,
            samrpc__pb2.InputInferArgsWithCache.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SAMPredict(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sam_service.SAMService/SAMPredict',
            samrpc__pb2.SAMPredictRequest.SerializeToString,
            samrpc__pb2.SAMPredictResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SAMPredictUseCache(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sam_service.SAMService/SAMPredictUseCache',
            samrpc__pb2.SAMPredictUseCacheRequest.SerializeToString,
            samrpc__pb2.SAMPredictResponseWithCache.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CleanCache(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sam_service.SAMService/CleanCache',
            samrpc__pb2.ServerCache.SerializeToString,
            samrpc__pb2.CleanCacheRespose.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
